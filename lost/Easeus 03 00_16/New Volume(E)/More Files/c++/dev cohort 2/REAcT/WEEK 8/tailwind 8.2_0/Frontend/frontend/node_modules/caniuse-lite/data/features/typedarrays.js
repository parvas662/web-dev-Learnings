ePath, node: Node): void;

        onCodePathSegmentStart?(segment: CodePathSegment, node: Node): void;

        onCodePathSegmentEnd?(segment: CodePathSegment, node: Node): void;

        onCodePathSegmentLoop?(fromSegment: CodePathSegment, toSegment: CodePathSegment, node: Node): void;

        [key: string]:
        | ((codePath: CodePath, node: Node) => void)
        | ((segment: CodePathSegment, node: Node) => void)
        | ((fromSegment: CodePathSegment, toSegment: CodePathSegment, node: Node) => void)
        | ((node: Node) => void)
        | NodeListener[keyof NodeListener]
        | undefined;
    }

    type CodePathOrigin = "program" | "function" | "class-field-initializer" | "class-static-block";

    interface CodePath {
        id: string;
        origin: CodePathOrigin;
        initialSegment: CodePathSegment;
        finalSegments: CodePathSegment[];
        returnedSegments: CodePathSegment[];
        thrownSegments: CodePathSegment[];
        upper: CodePath | null;
        childCodePaths: CodePath[];
    }

    interface CodePathSegment {
        id: string;
        nextSegments: CodePathSegment[];
        prevSegments: CodePathSegment[];
        reachable: boolean;
    }

    interface RuleMetaData {
        /** Properties often used for documentation generation and tooling. */
        docs?: {
            /** Provides a short description of the rule. Commonly used when generating lists of rules. */
            description?: string | undefined;
            /** Historically used by some plugins that divide rules into categories in their documentation. */
            category?: string | undefined;
            /** Historically used by some plugins to indicate a rule belongs in their `recommended` configuration. */
            recommended?