   return a + b;
          },
          peg$c56 = function peg$c56(d) {
            return {
              type: 'literal',
              value: strUnescape(d.join(''))
            };
          },
          peg$c57 = "'",
          peg$c58 = peg$literalExpectation("'", false),
          peg$c59 = /^[^\\']/,
          peg$c60 = peg$classExpectation(["\\", "'"], true, false),
          peg$c61 = /^[0-9]/,
          peg$c62 = peg$classExpectation([["0", "9"]], false, false),
          peg$c63 = function peg$c63(a, b) {
            // Can use `a.flat().join('')` once supported
            var leadingDecimals = a ? [].concat.apply([], a).join('') : '';
            return {
              type: 'literal',
              value: parseFloat(leadingDecimals + b.join(''))
            };
          },
          peg$c64 = function peg$c64(i) {
            return {
              type: 'literal',
              value: i
            };
          },
          peg$c65 = "type(",
          peg$c66 = peg$literalExpectation("type(", false),
          peg$c67 = /^[^ )]/,
          peg$c68 = peg$classExpectation([" ", ")"], true, false),
          peg$c69 = ")",
          peg$c70 = peg$literalExpectation(")", false),
          peg$c71 = function peg$c71(t) {
            return {
              type: 'type',
              value: t.join('')
            };
          },
          peg$c72 = /^[imsu]/,
          peg$c73 = peg$classExpectation(["i", "m", "s", "u"], false, false),
          peg$c74 = "/",
          peg$c75 = peg$literalExpectation("/", false),
          peg$c76 = /^[^\/]/,
          peg$c77 = peg$classExpectation(["/"], true, false),
          peg$c78 = function peg$c78(d, flgs) {
            return {
              type: 'regexp',
              value: new RegExp(d.join(''), flgs ? flgs.join('') : '')
            };
          },
          peg$c79 = function peg$c79(i, is) {
            return {
              type: 'field',
              name: is.reduce(function (memo, p) {
                return memo + p[0] + p[1];
              }, i)
            };
          },
          peg$c80 = ":not(",
          peg$c81 = peg$literalExpectation(":not(", false),
          peg$c82 = function peg$c82(ss) {
            return {
              type: 'not',
              selectors: ss
            };
          },
          peg$c83 = ":matches(",
          peg$c84 = peg$literalExpectation(":matches(", false),
 