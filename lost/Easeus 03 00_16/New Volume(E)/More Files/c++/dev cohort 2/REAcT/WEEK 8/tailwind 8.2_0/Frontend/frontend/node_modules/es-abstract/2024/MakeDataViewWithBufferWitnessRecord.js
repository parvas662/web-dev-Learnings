 `foo === NaN` and other comparisons.
         * @param {ASTNode} node The node to check.
         * @returns {void}
         */
        function checkBinaryExpression(node) {
            if (
                /^(?:[<>]|[!=]=)=?$/u.test(node.operator) &&
                (isNaNIdentifier(node.left) || isNaNIdentifier(node.right))
            ) {
                const suggestedFixes = [];
                const NaNNode = isNaNIdentifier(node.left) ? node.left : node.right;

                const isSequenceExpression = NaNNode.type === "SequenceExpression";
                const isSuggestable = fixableOperators.has(node.operator) && !isSequenceExpression;
                const isCastable = castableOperators.has(node.operator);

                if (isSuggestable) {
                    suggestedFixes.push({
                        messageId: "replaceWithIsNaN",
                        fix: getBinaryExpressionFixer(node, value => 