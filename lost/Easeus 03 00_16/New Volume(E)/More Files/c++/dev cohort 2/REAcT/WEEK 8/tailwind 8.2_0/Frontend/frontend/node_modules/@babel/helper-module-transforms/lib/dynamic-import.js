'use strict';

var test = require('tape');
var typedArrayByteLength = require('../');
var isCallable = require('is-callable');
var generators = require('make-generator-function')();
var arrowFn = require('make-arrow-function')();
var forEach = require('for-each');
var inspect = require('object-inspect');
var availableTypedArrays = require('available-typed-arrays')();

test('not arrays', function (t) {
	t.test('non-number/string primitives', function (st) {
		// @ts-expect-error
		st.equal(false, typedArrayByteLength(), 'undefined is not typed array');
		st.equal(false, typedArrayByteLength(null), 'null is not typed array');
		st.equal(false, typedArrayByteLength(false), 'false is not typed array');
		st.equal(false, typedArrayByteLength(true), 'true is not typed array');
		st.end();
	});

	t.equal(false, typedArrayByteLength({}), 'object is not typed array');
	t.equal(false, typedArrayByteLength(/a/g), 'regex literal is not typed array');
	t.equal(false, typedArrayByteLength(new RegExp('a', 'g')), 'regex object is not typed array');
	t.equal(false, typedArrayByteLength(new Date()), 'new Date() is not typed array');

	t.test('numbers', function (st) {
		st.equal(false, typedArrayByteLength(42), 'number is not typed array');
		st.equal(false, typedArrayByteLength(Object(42)), 'number object is not typed array');
		st.equal(false, typedArrayByteLength(NaN), 'NaN is not typed array');
		st.equal(false, typedArrayByteLength(Infinity), 'Infinity is not typed array');
		st.end();
	});

	t.test('strings', function (st) {
		st.equal(false, typedArrayByteLength('foo'), 'string primitive is not typed array');
		st.equal(false, typedArrayByteLength(Object('foo')), 'string object is not typed array');
		st.end();
	});

	t.end();
});

test('Fu