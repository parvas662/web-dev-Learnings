          return nthLast(1);
          },
          peg$c95 = ":nth-child(",
          peg$c96 = peg$literalExpectation(":nth-child(", false),
          peg$c97 = function peg$c97(n) {
            return nth(parseInt(n.join(''), 10));
          },
          peg$c98 = ":nth-last-child(",
          peg$c99 = peg$literalExpectation(":nth-last-child(", false),
          peg$c100 = function peg$c100(n) {
            return nthLast(parseInt(n.join(''), 10));
          },
          peg$c101 = ":",
          peg$c102 = peg$literalExpectation(":", false),
          peg$c103 = function peg$c103(c) {
            return {
              type: 'class',
              name: c
            };
          },
          peg$currPos = 0,
          peg$posDetailsCache = [{
            line: 1,
            column: 1
          }],
          peg$maxFailPos = 0,
          peg$maxFailExpected = [],
          peg$resultsCache = {},
          peg$result;
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
          }
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function peg$literalExpectation(text, ignoreCase) {
          return {
            type: "literal",
            text: text,
            ignoreCase: ignoreCase
          };
        }
        function peg$classExpectati