 not really flushed but there is
    // no parent segment so there's nothing to wait on.

    contentRootSegment.parentFlushed = true; // Currently this is running synchronously. We could instead schedule this to pingedTasks.
    // I suspect that there might be some efficiency benefits from not creating the suspended task
    // and instead just using the stack if possible.
    // TODO: Call this directly instead of messing with saving and restoring contexts.
    // We can reuse the current context and task to render the content immediately without
    // context switching. We just need to temporarily switch which boundary and which segment
    // we're writing to. If something suspends, it'll spawn new suspended task with that context.

    task.blockedBoundary = newBoundary;
    task.blockedSegment = contentRootSegment;

    try {
      // We use the safe form because we don't handle suspending here. Only error handling.
      renderNode(request, task, content);
      pushSegmentFinale$1(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
      contentRootSegment.status = COMPLETED;
      queueCompletedSegment(newBoundary, contentRootSegment);

      if (newBoundary.pendingTasks === 0) {
        // This must have been the last segment we were waiting on. This boundary is now complete.
        // Therefore we won't need the fallback. We early return so that we don't have to create
        // the fallback.
        popComponentStackInDEV(task);
        return;
      }
    } catch (error) {
      contentRootSegment.status = ERRORED;
      newBoundary.forceClientRender = true;
      newBoundary.errorDigest = logRecoverableError(request, error);

      {
        captureBoundaryErrorDetailsDev(newBoundary, error);
      } // We don't need to decrement any task numbers because we didn't spawn any new task.
      // We don't need to schedule any task because we know the parent has written yet.
      // We do need to fallthrough to create the fallback though.

    } finally {
      task.blockedBoundary = parentBoundary;
      task.blockedSegment = parentSegment;
    } // We create suspended task for the fallback because we don't want to actually work
    // on it yet in case we finish the main content, so we queue for later.


    var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);

    {
      suspendedFallbackTask.componentStack = task.componentStack;
    } // TODO: This should be queued at a separate lower priority queue so that we only work
    // on preparing fallbacks if we don't have any more main content to task on.


    request.pingedTasks.push(suspendedFallbackTask);
    popComponentStackInDEV(task);
  }

  function renderHostElement(request, task, type, props) {
    pushBuiltInComponentStackInDEV(task, type);
    var segment = task.blockedSegment;
    var children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
    segment.lastPushedText = false;
    var prevContext = segment.formatContext;
    segment.formatContext = getChildFormatContext(prevContext, type, props); // We use the non-destructive form because if something suspends, we still
    // need to pop back up and finish this subtree of HTML.

    renderNode(request, task, children); // We expect that errors will fatal the whole task and that we don't need
    // the correct context. Therefore this is not in a finally.

    segment.formatContext = prevContext;
    pushEndInstance(segment.chunks, type);
    segment.lastPushedText = false;
    popComponentStackInDEV(task);
  }

  function shouldConstruct$1(Component) {
    return Component.prototype && Component.prototype.isReactComponent;
  }

  function renderWithHooks(request, task, Component, props, secondArg) {
    var componentIdentity = {};
    prepareToUseHooks(task, componentIdentity);
    var result = Component(props, secondArg);
    return finishHooks(Component, props, result, secondArg);
  }

  function finishClassComponent(request, task, instance, Component, props) {
    var nextChildren = instance.render();

    {
      if (instance.props !== props) {
        if (!didWarnAboutReassigningProps) {
          error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromType(Component) || 'a component');
        }

        didWarnAboutReassigningProps = true;
      }
    }

    {
      var childContextTypes = Component.childContextTypes;

      if (childContextTypes !== null && childContextTypes !== undefined) {
        var previousContext = task.legacyContext;
        var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
        task.legacyContext = mergedContext;
        renderNodeDestructive(request, task, nextChildren);
        task.legacyContext = previousContext;
        return;
      }
    }

    renderNodeDestructive(request, task, nextChildren);
  }

  function renderClassComponent(request, task, Component, props) {
    pushClassComponentStackInDEV(task, Component);
    var maskedContext =  getMaskedContext(Component, task.legacyContext) ;
    var instance = constructClassInstance(Component, props, maskedContext);
    mountClassInstance(instance, Component, props, maskedContext);
    finishClassComponent(request, task, instance, Component, props);
    popComponentStackInDEV(task);
  }

  var didWarnAboutBadClass = {};
  var didWarnAboutModulePatternComponent = {};
  var didWarnAboutContextTypeOnFunctionComponent = {};
  var didWarnAboutGetDerivedStateOnFunctionComponent = {};
  var didWarnAboutReassigningProps = false;
  var didWarnAboutDefaultPropsOnFunctionComponent = {};
  var didWarnAboutGenerators = false;
  var didWarnAboutMaps = false;
  var hasWarnedAboutUsingContextAsConsumer = false; // This would typically be a function component but we still support module pattern
  // components for some reason.

  function renderIndeterminateComponent(request, task, Component, props) {
    var legacyContext;

    {
      legacyContext = getMaskedContext(Component, task.legacyContext);
    }

    pushFunctionComponentStackInDEV(task, Component);

    {
      if (Component.prototype && typeof Component.prototype.render === 'function') {
        var componentName = getComponentNameFromType(Component) || 'Unknown';

        if (!didWarnAboutBadClass[componentName]) {
          error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

          didWarnAboutBadClass[componentName] = true;
        }
      }
    }

    var value = renderWithHooks(request, task, Component, props, legacyContext);
    var hasId = checkDidRenderIdHook();

    {
      // Support for module components is deprecated and is removed behind a flag.
      // Whether or not it would crash later, we want to show a good message in DEV first.
      if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
        var _componentName = getComponentNameFromType(Component) || 'Unknown';

        if (!didWarnAboutModulePatternComponent[_componentName]) {
          error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

          didWarnAboutModulePatternComponent[_componentName] = true;
        }
      }
    }

    if ( // Run these checks in production only if the flag is off.
    // Eventually we'll delete this branch altogether.
     typeof value === 'object' && value !== null && typeof value.render === 'function' module.exports={A:{A:{"2":"K D E F A B gC"},B:{"1":"5 6 7 8 9 Q H R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x AB BB CB DB EB FB GB HB IB JB KB I","2":"C L M G N O P"},C:{"1":"5 6 7 8 9 nB oB pB qB rB sB JC tB KC uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC Q H R LC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x AB BB CB DB EB FB GB HB IB JB KB I BC MC NC iC","2":"0 1 2 3 4 hC IC J LB K D E F A B C L M G N O P MB y z NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB jC kC"},D:{"1":"5 6 7 8 9 rB sB JC tB KC uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC Q H R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x AB BB CB DB EB FB GB HB IB JB KB I BC MC NC","2":"0 1 2 3 4 J LB K D E F A B C L M G N O P MB y z NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB"},E:{"1":"C L M G CC DC qC rC sC QC RC EC tC FC SC TC UC VC WC uC GC XC YC ZC aC bC vC HC cC dC wC","2":"J LB K D E F A B lC OC mC nC oC pC PC"},F:{"1":"eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC Q H R LC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x","2":"0 1 2 3 4 F B C G N O P MB y z NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB xC yC zC 0C CC eC 1C DC"},G:{"1":"CD DD ED FD GD HD ID JD KD LD QC RC EC MD FC SC TC UC VC WC ND GC XC YC ZC aC bC OD HC cC dC","2":"E OC 2C fC 3C 4C 5C 6C 7C 8C 9C AD BD"},H:{"2":"PD"},I:{"1":"I","2":"IC J QD RD SD TD fC UD VD"},J:{"2":"D A"},K:{"1":"H","2":"A B C CC eC DC"},L:{"1":"I"},M:{"1":"BC"},N:{"2":"A B"},O:{"1":"EC"},P:{"1":"0 1 2 3 4 y z YD ZD aD PC bD cD dD eD fD FC GC HC gD","2":"J WD XD"},Q:{"1":"hD"},R:{"1":"iD"},S:{"1":"kD","2":"jD"}},B:2,C:"CSS caret-color",D:true};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              module.exports={A:{A:{"2":"K D E F A B gC"},B:{"2":"5 6 7 8 9 C L M G N O P Q H R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x AB BB CB DB EB FB GB HB IB JB KB I"},C:{"2":"0 1 2 3 4 5 6 7 8 9 hC IC J LB K D E F A B C L M G N O P MB y z NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB JC tB KC uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC Q H R LC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x AB BB CB DB EB FB GB HB IB JB KB I BC MC NC iC jC kC"},D:{"2":"5 6 7 8 9 iB jB kB lB mB nB oB pB qB rB sB JC tB KC uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC Q H R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x AB BB CB DB EB FB GB HB IB JB KB I BC MC NC","33":"0 1 2 3 4 J LB K D E F A B C L M G N O P MB y z NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB"},E:{"2":"lC OC","33":"J LB K D E F A B C L M G mC nC oC pC PC CC DC qC rC sC QC RC EC tC FC SC TC UC VC WC uC GC XC YC ZC aC bC vC HC cC dC wC"},F:{"2":"F B C VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC Q H R LC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x xC yC zC 0C CC eC 1C DC","33":"0 1 2 3 4 G N O P MB y z NB OB PB QB RB SB TB UB"},G:{"33":"E OC 2C fC 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD GD HD ID JD KD LD QC RC EC MD FC SC TC UC VC WC ND GC XC YC ZC aC bC OD HC cC dC"},H:{"2":"PD"},I:{"2":"I","33":"IC J QD RD SD TD fC UD VD"},J:{"33":"D A"},K:{"2":"A B C H CC eC DC"},L:{"2":"I"},M:{"2":"BC"},N:{"2":"A B"},O:{"2":"EC"},P:{"2":"0 1 2 3 4 y z WD XD YD ZD aD PC bD cD dD eD fD FC GC HC gD","33":"J"},Q:{"2":"hD"},R:{"2":"iD"},S:{"2":"jD kD"}},B:7,C:"CSS Canvas Drawings",D:true};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 module.exports={A:{A:{"1":"F A B","2":"K D E gC"},B:{"1":"5 6 7 8 9 C L M G N O P Q H R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x AB BB CB DB EB FB GB HB IB JB KB I"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J LB K D E F A B C L M G N O P MB y z NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB JC tB KC uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC Q H R LC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x AB BB CB DB EB FB GB HB IB JB KB I BC MC NC iC","2":"hC IC","33":"jC kC"},D:{"1":"0 1 2 3 4 5 6 7 8 9 A B C L M G N O P MB y z NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB JC tB KC uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC Q H R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x AB BB CB DB EB FB GB HB IB JB KB I BC MC NC","33":"J LB K D E F"},E:{"1":"K D E F A B C L M G mC nC oC pC PC CC DC qC rC sC QC RC EC tC FC SC TC UC VC WC uC GC XC YC ZC aC bC vC HC cC dC wC","33":"LB","164":"J lC OC"},F:{"1":"0 1 2 3 4 B C G N O P MB y z NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC Q H R LC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x zC 0C CC eC 1C DC","2":"F xC yC"},G:{"1":"E 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD GD HD ID JD KD LD QC RC EC MD FC SC TC UC VC WC ND GC XC YC ZC aC bC OD HC cC dC","33":"2C fC","164":"OC"},H:{"2":"PD"},I:{"1":"J I TD fC UD VD","164":"IC QD RD SD"},J:{"1":"A","33":"D"},K:{"1":"B C H CC eC DC","2":"A"},L:{"1":"I"},M:{"1":"BC"},N:{"1":"A B"},O:{"1":"EC"},P:{"1":"0 1 2 3 4 J y z WD XD YD ZD aD PC bD cD dD eD fD FC GC HC gD"},Q:{"1":"hD"},R:{"1":"iD"},S:{"1":"jD kD"}},B:4,C:"CSS3 Box-shadow",D:true};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       module.exports={A:{A:{"2":"K D E F A B gC"},B:{"1":"KB I","2":"C L M G N O P","164":"5 6 7 8 9 Q H R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x AB BB CB DB EB FB GB HB IB JB"},C:{"1":"5 6 7 8 9 SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB JC tB KC uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC Q H R LC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x AB BB CB DB EB FB GB HB IB JB KB I BC MC NC iC","2":"0 1 2 3 4 hC IC J LB K D E F A B C L M G N O 