var hasStrictMode = require('has-strict-mode')();
var v = require('es-value-fixtures');
var forEach = require('for-each');
var inspect = require('object-inspect');
var maxSafeInteger = require('es-abstract/helpers/maxSafeInteger');
var global = require('globalthis')();

var trueThunk = function () { return true; };
var falseThunk = function () { return false; };

var canDistinguishSparseFromUndefined = 0 in [undefined]; // IE 6 - 8 have a bug where this returns false.
var undefinedIfNoSparseBug = canDistinguishSparseFromUndefined ? undefined : { valueOf: function () { return 0; } };

var createArrayLikeFromArray = function createArrayLikeFromArray(arr) {
	var o = {};
	for (var i = 0; i < arr.length; i += 1) {
		if (i in arr) {
			o[i] = arr[i];
		}
	}
	o.length = arr.length;
	return o;
};

var getTestArr = function () {
	var arr = [0, false, null, 'hej', true, undefinedIfNoSparseBug, 3, 2];
	delete arr[6];
	return arr;
};

module.exports = function (findLast, t) {
	forEach(v.nonArrays, function (nonArray) {
		if (nonArray != null) { // eslint-disable-line eqeqeq
			t.equal(
				findLast(nonArray, function () { return true; }),
				nonArray.length > 0 ? nonArray[nonArray.length - 1] : undefined,
				inspect(nonArray) + ' is not an array'
			);
		}
	});

	t.test('throws on a non-callable predicate', function (st) {
		forEach(v.nonFunctions, function (nonFunction) {
			st['throws'](
				function () { findLast([], nonFunction); },
				TypeError,
				inspect(nonFunction) + ' is not a Function'
			);
		});

		st.end();
	});

	t.test('passes the correct values to the callback', function (st) {
		st.plan(5);

		var expectedValue = {};
		var arr = [expectedValue];
		var context = {};
		findLast(arr, function (value, key, list) {
			st.equal(arguments.length, 3);
			st.equal(value, expectedValue, 'first argument is the value');
			st.equal(key, 0, 'second argument is the index');
			st.equal(list, arr, 'third argument is the array being iterated');
			st.equal(this, context, 'receiver is the expected value');
			return true;
		}, context);

		st.end();
	});

	t.test('does not visit elements added to the array after it has begun', function (st) {
		st.plan(2);

		var arr = [1, 2, 3];
		var i = 0;
		findLast(arr, function (a) {
			i += 1;
			arr.push(a + 3);
			return i > 3;
		});
		st.deepEqual(arr, [1, 2, 3, 6, 5, 4], 'array has received 3 new elements');
		st.equal(i, 3, 'findLast callback only called thrice');

		st.en