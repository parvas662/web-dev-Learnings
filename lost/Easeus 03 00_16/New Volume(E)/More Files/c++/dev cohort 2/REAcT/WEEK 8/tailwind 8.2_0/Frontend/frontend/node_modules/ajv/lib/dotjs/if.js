eDirectives` is not supported
 * (this function always reports unused disable directives).
 * @returns {{problems: LintMessage[], unusedDirectives: LintMessage[]}} An object with a list
 * of problems (including suppressed ones) and unused eslint-disable directives
 */
function applyDirectives(options) {
    const problems = [];
    const usedDisableDirectives = new Set();
    const { sourceCode } = options;

    for (const problem of options.problems) {
        let disableDirectivesForProblem = [];
        let nextDirectiveIndex = 0;

        while (
            nextDirectiveIndex < options.directives.length &&
            compareLocations(options.directives[nextDirectiveIndex], problem) <= 0
        ) {
            const directive = options.directives[nextDirectiveIndex++];

            if (directive.ruleId === null || directive.ruleId === problem.ruleId) {
                switch (directive.type) {
                    case "disable":
                        disableDirectivesForProblem.push(directive);
                        break;

                    case "enable":
                        disableDirectivesForProblem = [];
                        break;

                    // no default
                }
            }
        }

        if (disableDirectivesForProblem.length > 0) {
            const suppressions = disableDirectivesForProblem.map(directive => ({
                kind: "directive",
                justification: directive.unprocessedDirective.justification
            }));

            if (problem.suppressions) {
                problem.suppressions = problem.suppressions.concat(suppressions);
            } else {
                problem.suppressions = suppressions;
                usedDisableDirectives.add(disableDirectivesForProblem.at(-1));
            }
        }

        problems.push(problem);
    }

    const unusedDisableDirectivesToReport = options.directives
        .filter(directive => directive.type === "disable" && !usedDisableDirectives.has(directive) && !options.rulesToIgnore.has(directive.ruleId));


    const unusedEnableDirectivesToReport = new Set(
        options.directives.filter(directive => directive.unprocessedDirective.type === "enable" && !options.rulesToIgnore.has(directive.ruleId))
    );

    /*
     * If directives has the eslint-enable directive,
     * check whether the eslint-enable comment is used.
     */
    if (unusedEnableDirectivesToReport.size > 0) {
        for (const directive of collectUsedEnableDirectives(options.directives)) {
            unusedEnableDirectivesToReport.delete(directive);
        }
    }

    const processed = processUnusedDirectives(unusedDisableDirectivesToReport, sourceCode)
        .concat(processUnusedDirectives(unusedEnableDirectivesToReport, sourceCode));
    const columnOffset = options.language.columnStart === 1 ? 0 : 1;
    const lineOffset = options.language.lineStart === 1 ? 0 : 1;

    const unusedDirectives = processed
        .map(({ description, fix, unprocessedDirective }) => {
            const { parentDirective, type, line, column } = unprocessedDirective;

            let message;

            if (type === "enable") {
                message = description
                    ? `Unused eslint-enable directive (no matching eslint-disable directives were found for ${description}).`
                    : "Unused eslint-enable directive (no matching eslint-disable directives were found).";
            } else {
                message = description
                    ? `Unused eslint-disable directive (no problems were reported from ${description}).`
                    : "Unused eslint-disable directive (no problems were reported).";
            }

            const loc = sourceCode.getLoc(parentDirective.node);

            return {
                ruleId: null,
                message,
                line: type === "disable-next-line" ? loc.start.line + lineOffset : line,
                column: type === "disable-next-line" ? loc.start.column + columnOffset : column,
                severity: options.reportUnusedDisableDirectives === "warn" ? 1 : 2,
                nodeType: null,
     