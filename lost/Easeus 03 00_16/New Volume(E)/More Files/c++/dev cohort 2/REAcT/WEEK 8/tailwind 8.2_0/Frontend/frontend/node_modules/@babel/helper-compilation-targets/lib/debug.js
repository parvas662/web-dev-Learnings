'use strict';

var callBind = require('call-bind');
var forEach = require('for-each');
var gOPD = require('gopd');
var hasProto = require('has-proto')();
var isTypedArray = require('is-typed-array');

var typedArrays = require('available-typed-arrays')();

/** @typedef {Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array | BigInt64Array | BigUint64Array} TypedArray */
/** @typedef {import('possible-typed-array-names')[number]} TypedArrayNames */
/** @typedef {(value: TypedArray) => number} Getter */

/** @type {Object.<TypedArrayNames, Getter>} */
var getters = {};

var oDP = Object.defineProperty;
if (gOPD) {
	/** @type {Getter} */
	var getByteLength = function (x) {
		return x.byteLength;
	};
	forEach(typedArrays, function (typedArray) {
		// In Safari 7, Typed Array constructors are typeof object
		if (typeof global[typedArray] === 'function' || typeof global[typedArray] === 'object') {
			var Proto = global[typedArray].prototype;
			// @ts-expect-error TS doesn't narrow properly