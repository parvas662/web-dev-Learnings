eadingDecimals + b.join('')) };
              },
        peg$c64 = function(i) { return { type: 'literal', value: i }; },
        peg$c65 = "type(",
        peg$c66 = peg$literalExpectation("type(", false),
        peg$c67 = /^[^ )]/,
        peg$c68 = peg$classExpectation([" ", ")"], true, false),
        peg$c69 = ")",
        peg$c70 = peg$literalExpectation(")", false),
        peg$c71 = function(t) { return { type: 'type', value: t.join('') }; },
        peg$c72 = /^[imsu]/,
        peg$c73 = peg$classExpectation(["i", "m", "s", "u"], false, false),
        peg$c74 = "/",
        peg$c75 = peg$literalExpectation("/", false),
        peg$c76 = /^[^\/]/,
        peg$c77 = peg$classExpectation(["/"], true, false),
        peg$c78 = function(d, flgs) { return {
              type: 'regexp', value: new RegExp(d.join(''), flgs ? flgs.join('') : '') };
            },
        peg$c79 = function(i, is) {
          return { type: 'field', name: is.reduce(function(memo, p){ return memo + p[0] + p[1]; }, i)};
        },
        peg$c80 = ":not(",
        peg$c81 = peg$literalExpectation(":not(", false),
        peg$c82 = function(ss) { return { type: 'not', selectors: ss }; },
        peg$c83 = ":matches(",
        peg$c84 = peg$literalExpectation(":matches(", false),
        peg$c85 = function(ss) { return { type: 'matches', selectors: ss }; },
        peg$c86 = ":has(",
        peg$c87 = peg$literalExpectation(":has(", false),
        peg$c88 = function(ss) { return { type: 'has', selectors: ss }; },
        peg$c89 = ":first-child",
        peg$c90 = peg$literalExpectation(":first-child", false),
        peg$c91 = function() { return nth(1); },
        peg$c92 = ":last-child",
        peg$c93 = peg$literalExpectation(":last-child", false),
        peg$c94 = function() { return nthLast(1); },
        peg$c95 = ":nth-child(",
        peg$c96 = peg$literalExpectation(":nth-child(", false),
        peg$c97 = function(n) { return nth(parseInt(n.join(''), 10)); },
        peg$c98 = ":nth-last-child(",
        peg$c99 = peg$literalExpectation(":nth-last-child(", false),
        peg$c100 = function(n) { return nthLast(parseInt(n.join(''), 10)); },
        peg$c101 = ":",
        peg$c102 = peg$literalExpectation(":", false),
        peg$c103 = function(c) {
          return { type: 'class', name: c };
        },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location 