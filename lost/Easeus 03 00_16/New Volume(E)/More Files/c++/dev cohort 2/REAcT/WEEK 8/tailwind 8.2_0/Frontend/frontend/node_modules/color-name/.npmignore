agCache.set(tag, tagStartChunk);
    }

    return tagStartChunk;
  }

  var DOCTYPE = stringToPrecomputedChunk('<!DOCTYPE html>');
  function pushStartInstance(target, type, props, responseState, formatContext) {
    {
      validateProperties(type, props);
      validateProperties$1(type, props);
      validateProperties$2(type, props, null);

      if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
        error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
      }

      if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
        if (type.indexOf('-') === -1 && typeof props.is !== 'string' && type.toLowerCase() !== type) {
          error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
        }
      }
    }

    switch (type) {
      // Special tags
      case 'select':
        return pushStartSelect(target, props, responseState);

      case 'option':
        return pushStartOption(target, props, responseState, formatContext);

      case 'textarea':
        return pushStartTextArea(target, props, responseState)