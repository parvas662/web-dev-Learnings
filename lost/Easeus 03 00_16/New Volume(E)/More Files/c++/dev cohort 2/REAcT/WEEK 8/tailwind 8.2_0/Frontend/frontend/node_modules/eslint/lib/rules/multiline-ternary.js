ends> | null;\n  body: ObjectTypeAnnotation;\n}\n\nexport interface IntersectionTypeAnnotation extends BaseNode {\n  type: \"IntersectionTypeAnnotation\";\n  types: Array<FlowType>;\n}\n\nexport interface MixedTypeAnnotation extends BaseNode {\n  type: \"MixedTypeAnnotation\";\n}\n\nexport interface EmptyTypeAnnotation extends BaseNode {\n  type: \"EmptyTypeAnnotation\";\n}\n\nexport interface NullableTypeAnnotation extends BaseNode {\n  type: \"NullableTypeAnnotation\";\n  typeAnnotation: FlowType;\n}\n\nexport interface NumberLiteralTypeAnnotation extends BaseNode {\n  type: \"NumberLiteralTypeAnnotation\";\n  value: number;\n}\n\nexport interface NumberTypeAnnotation extends BaseNode {\n  type: \"NumberTypeAnnotation\";\n}\n\nexport interface ObjectTypeAnnotation extends BaseNode {\n  type: \"ObjectTypeAnnotation\";\n  properties: Array<ObjectTypeProperty | ObjectTypeSpreadProperty>;\n  indexers?: Array<ObjectTypeIndexer>;\n  callProperties?: Array<ObjectTypeCallProperty>;\n  internalSlots?: Array<ObjectTypeInternalSlot>;\n  exact: boolean;\n  inexact?: boolean | null;\n}\n\nexport interface ObjectTypeInternalSlot extends BaseNode {\n  type: \"ObjectTypeInternalSlot\";\n  id: Identifier;\n  value: FlowType;\n  optional: boolean;\n  static: boolean;\n  method: boolean;\n}\n\nexport interface ObjectTypeCallProperty extends BaseNode {\n  type: \"ObjectTypeCallProperty\";\n  value: FlowType;\n  static: boolean;\n}\n\nexport interface ObjectTypeIndexer extends BaseNode {\n  type: \"ObjectTypeIndexer\";\n  id?: Identifier | null;\n  key: FlowType;\n  value: FlowType;\n  variance?: Variance | null;\n  static: boolean;\n}\n\nexport interface ObjectTypeProperty extends BaseNode {\n  type: \"ObjectTypeProperty\";\n  key: Identifier | StringLiteral;\n  value: FlowType;\n  variance?: Variance | null;\n  kind: \"init\" | \"get\" | \"set\";\n  method: boolean;\n  optional: boolean;\n  proto: boolean;\n  static: boolean;\n}\n\nexport interface ObjectTypeSpreadProperty extends BaseNode {\n  type: \"ObjectTypeSpreadProperty\";\n  argument: FlowType;\n}\n\nexport interface OpaqueType extends BaseNode {\n  type: \"OpaqueType\";\n  id: Identifier;\n  typeParameters?: TypeParameterDeclaration | null;\n  supertype?: FlowType | null;\n  impltype: FlowType;\n}\n\nexport interface QualifiedTypeIdentifier extends BaseNode {\n  type: \"QualifiedTypeIdentifier\";\n  id: Identifier;\n  qualification: Identifier | QualifiedTypeIdentifier;\n}\n\nexport interface StringLiteralTypeAnnotation extends BaseNode {\n  type: \"StringLiteralTypeAnnotation\";\n  value: string;\n}\n\nexport interface StringTypeAnnotation extends BaseNode {\n  type: \"StringTypeAnnotation\";\n}\n\nexport interface SymbolTypeAnnotation extends BaseNode {\n  type: \"SymbolTypeAnnotation\";\n}\n\nexport interface ThisTypeAnnotation extends BaseNode {\n  type: \"ThisTypeAnnotation\";\n}\n\nexport interface TupleTypeAnnotation extends BaseNode {\n  type: \"TupleTypeAnnotation\";\n  types: Array<FlowType>;\n}\n\nexport interface TypeofTypeAnnotation extends BaseNode {\n  type: \"TypeofTypeAnnotation\";\n  argument: FlowType;\n}\n\nexport interface TypeAlias extends BaseNode {\n  type: \"TypeAlias\";\n  id: Identifier;\n  typeParameters?: TypeParameterDeclaration | null;\n  right: FlowType;\n}\n\nexport interface TypeAnnotation extends BaseNode {\n  type: \"TypeAnnotation\";\n  typeAnnotation: FlowType;\n}\n\nexport interface TypeCastExpression extends BaseNode {\n  type: \"TypeCastExpression\";\n  expression: Expression;\n  typeAnnotation: TypeAnnotation;\n}\n\nexport interface TypeParameter extends BaseNode {\n  type: \"TypeParameter\";\n  bound?: TypeAnnotation | null;\n  default?: FlowType | null;\n  variance?: Variance | null;\n  name: string;\n}\n\nexport interface TypeParameterDeclaration extends BaseNode {\n  type: \"TypeParameterDeclaration\";\n  params: Array<TypeParameter>;\n}\n\nexport interface TypeParameterInstantiation extends BaseNode {\n  type: \"TypeParameterInstantiation\";\n  params: Array<FlowType>;\n}\n\nexport interface UnionTypeAnnotation extends BaseNode {\n  type: \"UnionTypeAnnotation\";\n  types: Array<FlowType>;\n}\n\nexport interface Variance extends BaseNode {\n  type: \"Variance\";\n  kind: \"minus\" | \"plus\";\n}\n\nexport interface VoidTypeAnnotation extends BaseNode {\n  type: \"VoidTypeAnnotation\";\n}\n\nexport interface EnumDeclaration extends BaseNode {\n  type: \"EnumDeclaration\";\n  id: Identifier;\n  body: EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody;\n}\n\nexport interface EnumBooleanBody extends BaseNode {\n  type: \"EnumBooleanBody\";\n  members: Array<EnumBooleanMember>;\n  explicitType: boolean;\n  hasUnknownMembers: boolean;\n}\n\nexport interface EnumNumberBody extends BaseNode {\n  type: \"EnumNumberBody\";\n  members: Array<EnumNumberMember>;\n  explicitType: boolean;\n  hasUnknownMembers: boolean;\n}\n\nexport interface EnumStringBody extends BaseNode {\n  type: \"EnumStringBody\";\n  members: Array<EnumStringMember | EnumDefaultedMember>;\n  explicitType: boolean;\n  hasUnknownMembers: boolean;\n}\n\nexport interface EnumSymbolBody extends BaseNode {\n  type: \"EnumSymbolBody\";\n  members: Array<EnumDefaultedMember>;\n  hasUnknownMembers: boolean;\n}\n\nexport interface EnumBooleanMember extends BaseNode {\n  type: \"EnumBooleanMember\";\n  id: Identifier;\n  init: BooleanLiteral;\n}\n\nexport interface EnumNumberMember extends BaseNode {\n  type: \"EnumNumberMember\";\n  id: Identifier;\n  init: NumericLiteral;\n}\n\nexport interface EnumStringMember extends BaseNode {\n  type: \"EnumStringMember\";\n  id: Identifier;\n  init: StringLiteral;\n}\n\nexport interface EnumDefaultedMember extends BaseNode {\n  type: \"EnumDefaultedMember\";\n  id: Identifier;\n}\n\nexport interface IndexedAccessType extends BaseNode {\n  type: \"IndexedAccessType\";\n  objectType: FlowType;\n  indexType: FlowType;\n}\n\nexport interface OptionalIndexedAccessType extends BaseNode {\n  type: \"OptionalIndexedAccessType\";\n  objectType: FlowType;\n  indexType: FlowType;\n  optional: boolean;\n}\n\nexport interface JSXAttribute extends BaseNode {\n  type: \"JSXAttribute\";\n  name: JSXIdentifier | JSXNamespacedName;\n  value?:\n    | JSXElement\n    | JSXFragment\n    | StringLiteral\n    | JSXExpressionContainer\n    | null;\n}\n\nexport interface JSXClosingElement extends BaseNode {\n  type: \"JSXClosingElement\";\n  name: JSXIdentifier | JSXMemberExpression | JSXNamespacedName;\n}\n\nexport interface JSXElement extends BaseNode {\n  type: \"JSXElement\";\n  openingElement: JSXOpeningElement;\n  closingElement?: JSXClosingElement | null;\n  children: Array<\n    JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment\n  >;\n  selfClosing?: boolean | null;\n}\n\nexport interface JSXEmptyExpression extends BaseNode {\n  type: \"JSXEmptyExpression\";\n}\n\nexport interface JSXExpressionContainer extends BaseNode {\n  type: \"JSXExpressionContainer\";\n  expression: Expression | JSXEmptyExpression;\n}\n\nexport interface JSXSpreadChild extends BaseNode {\n  type: \"JSXSpreadChild\";\n  expression: Expression;\n}\n\nexport interface JSXIdentifier extends BaseNode {\n  type: \"JSXIdentifier\";\n  name: string;\n}\n\nexport interface JSXMemberExpression extends BaseNode {\n  type: \"JSXMemberExpression\";\n  object: JSXMemberExpression | JSXIdentifier;\n  property: JSXIdentifier;\n}\n\nexport interface JSXNamespacedName extends BaseNode {\n  type: \"JSXNamespacedName\";\n  namespace: JSXIdentifier;\n  name: JSXIdentifier;\n}\n\nexport interface JSXOpeningElement extends BaseNode {\n  type: \"JSXOpeningElement\";\n  name: JSXIdentifier | JSXMemberExpression | JSXNamespacedName;\n  attributes: Array<JSXAttribute | JSXSpreadAttribute>;\n  selfClosing: bo