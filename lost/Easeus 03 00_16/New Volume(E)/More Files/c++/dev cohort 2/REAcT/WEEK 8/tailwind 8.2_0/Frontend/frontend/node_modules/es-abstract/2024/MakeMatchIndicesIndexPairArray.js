  init.computed ||
                    (init = init.property);
                  if ("Identifier" !== init.type) return !1;
                  def = def.node.id;
                  init = init.name;
                  if ("useRef" === init && "Identifier" === def.type) return !0;
                  if (
                    "useState" === init ||
                    "useReducer" === init ||
                    "useActionState" === init
                  ) {
                    if (
                      "ArrayPattern" === def.type &&
                      2 === def.elements.length &&
                      isArray(resolved.identifiers)
                    ) {
                      if (def.elements[1] === resolved.identifiers[0]) {
                        if ("useState" === init)
                          for (
                            resolved = resolved.references,
                              declaration = init = 0;
                            declaration < resolved.length;
                            declaration++
                          ) {
                            resolved[declaration].isWrite() && init++;
                            if (1 < init) return !1;
                            setStateCallSites.set(
                              resolved[declaration].identifier,
                              def.elements[0]
                            );
                          }
                        return !0;
                      }
                      if (
                        def.elements[0] === resolved.identifiers[0] &&
                        "useState" === init
                      )
                        for (
                          resolved = resolved.references, def = 0;
                          def < resolved.length;
                          def++
                        )
                          stateVariables.add(resolved[def].identifier);
                    }
                  } else if (
                    "useTransition" === init &&
                    "ArrayPattern" === def.type &&
                    2 === def.elements.length &&
                    Array.isArray(resolved.identifiers) &&
                    def.elements[1] === resolved.identifiers[0]
                  )
                    return !0;
                  return !1;
                }, stableKnownValueCache),
                memoizedIsFunctionWithoutCapturedValues = memoizeWithWeakMap(
                  function (resolved) {
                    if (!isArray(resolved.defs)) return !1;
                    resolved = resolved.defs[0];
                    if (
                      null == resolved ||
                      null == re